#+title: ðŸŽ„ Advent_of_code ðŸŽ„

ðŸŽ„ Every Christmas, we muster up the motivation to do AOC again ðŸŽ„

* Table of Contents :TOC:
- [[#year-2024][Year 2024]]
  - [[#tooling-info-for-this-years-advent-of-code][Tooling Info for this year's advent of code]]
  - [[#day-1-edit-distance-and-similarity-score][Day 1: Edit Distance and Similarity Score]]
  - [[#day-2-monotonicity][Day 2: Monotonicity]]

* Year 2024
** Tooling Info for this year's advent of code
I'm just going to use org-babel for this, intending to just use the new python knowledge gained from using the "Fluent Python" book.

*** Fetching the day's inputs
I have an input downloader script at =./io/input_fetcher.sh=.
It looks something like this:
#+begin_src bash
#!/bin/bash

# Check if the correct number of arguments is provided
if [ "$#" -ne 4 ]; then
    echo "Usage: $0 <year> <day> <session_cookie> <output_directory>"
    exit 1
fi

YEAR=$1
DAY=$2
SESSION_COOKIE=$3
OUTPUT_DIR=$4

# Create the output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Download the input file for the specified year and day
curl "https://adventofcode.com/$YEAR/day/$DAY/input" \
  --cookie "session=$SESSION_COOKIE" \
  -o "$OUTPUT_DIR/${YEAR}_day${DAY}_input.txt"

if [ $? -eq 0 ]; then
    echo "Input for Day $DAY of Year $YEAR downloaded successfully to $OUTPUT_DIR."
else
    echo "Failed to download input for Day $DAY of Year $YEAR."
fi
#+end_src

Here's how to use it:
#+begin_src bash :results output replace
pwd;
./io/input_fetcher.sh 2024 1 <your_session_cookie> ./io/
#+end_src

*** Python Efficient File Reading
Python has a bunch of ways to read files:
1. bufferred reading
2. chunking
3. using a mmap
   - will handle huge files, even those that can't be mapped onto the RAM as well
   - [[https://blog.finxter.com/5-best-ways-to-improve-file-reading-performance-in-python-with-mmap/][here's]] some ways to setup the mmap (e.g. with file-locking)
4. iter over file obj
   - good for text files

#+name: Reader
#+begin_src python :results output :session my_session
class Reader:
    def __init__(self, filename):
        self.filename = filename
        self.url = f"./io/{filename}"
        return

    def apply_fn_to_lines(self, fn):
        with open(self.url) as f:
            return [fn(line) for line in f]

#+end_src

** Day 1: Edit Distance and Similarity Score
[2024-12-02 Mon]
Part 1: get edit distance
This is about a very primitive edit-distance metric. It's all to do with numbers.

Part 2: get similarity score, similarly primitive.

I think this is a good example of python's expressiveness as a language.

#+name: Day 1
#+begin_src python :results output
from collections import Counter
class Solution:
    def reader(self, url):
        with open(url) as f:
            data = f.read()
            split_lines = (line.split() for line in data.split("\n"))
            tups = ((int(line[0]), int(line[1])) for line in split_lines if line)
            left, right = [], []
            for left_val, right_val in tups:
                left.append(left_val)
                right.append(right_val)

            return left, right


    # only to be used for the examples
    def parse_input(self, input):
        split_lines = (line.split() for line in input.split("\n"))

        return ((int(left), int(right)) for left, right in split_lines)

    def transform_input(self, input):
        left, right = [], []
        lines = self.parse_input(input)
        for left_val, right_val in lines:
            left.append(left_val)
            right.append(right_val)

        return left, right

    def get_edit_distance(self, left_vals, right_vals):
        distances = [abs(left - right) for left, right in zip(sorted(left_vals), sorted(right_vals))]

        return sum(distances)

    def get_similarity_score(self, left_vals, right_vals):
        right_counts = Counter(right_vals)
        scores = (val * right_counts[val]  for val in left_vals)

        return sum(scores)

input = \
"""3   4
4   3
2   5
1   3
3   9
3   3"""
url = "./io/2024_day1_input.txt"
s = Solution()
# test small inputs:
small_input = s.transform_input(input)
print(s.get_edit_distance(*small_input))
print(s.get_similarity_score(*small_input))

left, right = s.reader(url)
ans_part_1 = s.get_edit_distance(left, right)
ans_part_2 = s.get_similarity_score(left, right)

print(f'answer for part 1: {ans_part_1}')
print(f'answer for part 2: {ans_part_2}')
#+end_src

** Day 2: Monotonicity
[2024-12-02 Mon]
Notes:
1. python's walrus operator to set aliases is convenient!
   * ref:
     - assignment expressions [[https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions][release doc]]
     - assignment expressions [[https://peps.python.org/pep-0572/][PEP write-up]]
   * e.g. used in the solution below:
     #+begin_src python
     part_2_ans = len([outcome for report in reports if (outcome := s.is_report_tolerably_safe(report))])
     #+end_src


#+begin_src python -n :results output
class Solution:
    def read_small(self):
        small_input = [[7,6,4,2,1], [1,2,7,8,9], [9,7,6,2,1], [1,3,2,4,5], [8,6,4,4,1], [1,3,6,7,9] ]
        return small_input

    def read(self, url):
        with open(url) as f:
            data = f.read()
            split_lines = (line.split() for line in data.split("\n"))
            numbered_reports = []
            for line in split_lines:
                numbered_reports.append([int(level) for level in line])

            return numbered_reports

    def get_first_faulty_level_in_report(self, report):
        num_levels = len(report)
        if num_levels == 1:
            return num_levels # indicates that all levels have been swept

        prev_direction = None
        for i in range(1, len(report)):
            jump = report[i] - report[i - 1]
            is_legal_jump = abs(jump) >= 1 and abs(jump) <= 3
            if not is_legal_jump:
                return i
            if jump == 0: # not monotonically increasing, is a plateau
                return i
            is_same_direction = (jump >= 0) == (prev_direction >= 0) if prev_direction else True
            if not is_same_direction:
                return i
            prev_direction = jump

        return num_levels

    def is_report_safe(self, report):
        if not report:
            return False
        faulty_idx = self.get_first_faulty_level_in_report(report)
        if faulty_idx == len(report):
            return True

        return False

    def is_report_tolerably_safe(self, report):
        if self.is_report_safe(report):
            return True
        for skip_idx in range(len(report)):
            edited_report = report[:skip_idx] + report[skip_idx + 1:]
            if self.is_report_safe(edited_report):
                return True
        return False

s = Solution()
small_input =  s.read_small()
num_safe_reports = len([outcome for report in small_input if (outcome := s.is_report_safe(report))])
print(f"small input ans 1: {num_safe_reports}")
print(f"small input ans 2: {len([outcome for report in small_input if (outcome := s.is_report_tolerably_safe(report))])}")


reports = s.read("./io/2024_day2_input.txt")
part_1_ans = len([outcome for report in reports if (outcome := s.is_report_safe(report))])
print(f"part 1 ans: {part_1_ans}")

part_2_ans = len([outcome for report in reports if (outcome := s.is_report_tolerably_safe(report))])
print(f"part 2 ans: {part_2_ans}")
#+end_src

#+RESULTS:
: small input ans 1: 2
: small input ans 2: 4
: part 1 ans: 591
: part 2 ans: 621
